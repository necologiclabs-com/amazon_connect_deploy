name: PR Validation

on:
  pull_request:
    paths:
      - 'flows/**'
      - 'env/**'
      - 'scripts/**'
      - 'cdk/**'
    branches: [ main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

jobs:
  validate:
    name: Validate Contact Flows
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials (read-only for validation)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_VALIDATION_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run linting
      run: npm run lint

    - name: Normalize contact flows
      run: |
        npm run normalize
        if [ -n "$(git status --porcelain)" ]; then
          echo "::warning::Contact flows were normalized. Please commit the changes."
        fi

    - name: Validate flow templates
      run: npm run validate

    - name: Render flows for TEST environment
      run: |
        npm run render -- --env test --output dist/test
        echo "TEST_RENDER_SUCCESS=true" >> $GITHUB_ENV

    - name: Render flows for PROD environment
      run: |
        npm run render -- --env prod --output dist/prod
        echo "PROD_RENDER_SUCCESS=true" >> $GITHUB_ENV

    - name: Schema validation
      run: |
        node scripts/schema-validation.js --env test
        node scripts/schema-validation.js --env prod

    - name: Reference integrity check
      run: |
        node scripts/integrity-check.js --env test
        node scripts/integrity-check.js --env prod

    - name: Static flow analysis
      run: node scripts/static-analysis.js

    - name: Contract testing
      run: npm test

    - name: Generate validation report
      if: always()
      run: |
        node scripts/generate-report.js \
          --template-validation ${{ job.status }} \
          --test-render ${{ env.TEST_RENDER_SUCCESS }} \
          --prod-render ${{ env.PROD_RENDER_SUCCESS }} \
          --output validation-report.md

    - name: Comment PR with validation results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let body = 'Unknown error occurred';
          try {
            body = fs.readFileSync('validation-report.md', 'utf8');
          } catch (error) {
            body = `# Validation Report\\n\\n‚ùå **Failed to generate report**\\n\\nError: ${error.message}`;
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

    - name: Upload validation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-results
        path: |
          dist/
          validation-report.md
          *.log