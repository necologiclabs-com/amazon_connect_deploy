name: Deploy to TEST

on:
  push:
    branches: [ main ]
    paths:
      - 'flows/**'
      - 'env/**'
      - 'scripts/**'
      - 'cdk/**'

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1
  ENVIRONMENT: test

jobs:
  deploy-test:
    name: Deploy to TEST Environment
    runs-on: ubuntu-latest
    environment: test
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials for TEST
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_TEST_DEPLOY_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run validation
      run: |
        npm run validate
        npm run render -- --env ${{ env.ENVIRONMENT }} --output dist/${{ env.ENVIRONMENT }}

    - name: Schema and integrity checks
      run: |
        node scripts/schema-validation.js --env ${{ env.ENVIRONMENT }}
        node scripts/integrity-check.js --env ${{ env.ENVIRONMENT }}

    - name: Install CDK
      run: npm install -g aws-cdk

    - name: CDK Bootstrap (if needed)
      run: |
        cd cdk
        cdk bootstrap --context environment=${{ env.ENVIRONMENT }}

    - name: CDK Synth
      run: |
        cd cdk
        cdk synth --context environment=${{ env.ENVIRONMENT }} --context flowsPath=../dist/${{ env.ENVIRONMENT }}

    - name: CDK Deploy
      run: |
        cd cdk
        cdk deploy --all \
          --context environment=${{ env.ENVIRONMENT }} \
          --context flowsPath=../dist/${{ env.ENVIRONMENT }} \
          --require-approval never \
          --outputs-file ../deployment-outputs.json

    - name: Post-deployment validation
      run: |
        sleep 30  # Wait for resources to be ready
        node scripts/post-deploy-validation.js --env ${{ env.ENVIRONMENT }}

    - name: Integration testing
      run: |
        node scripts/integration-test.js --env ${{ env.ENVIRONMENT }}

    - name: Generate deployment report
      if: always()
      run: |
        node scripts/generate-deployment-report.js \
          --env ${{ env.ENVIRONMENT }} \
          --status ${{ job.status }} \
          --outputs deployment-outputs.json \
          --output deployment-report.md

    - name: Upload deployment artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-deployment-${{ github.sha }}
        path: |
          deployment-outputs.json
          deployment-report.md
          cdk.out/
          *.log

    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}';
          const emoji = status === 'success' ? '✅' : '❌';
          const message = `${emoji} **TEST deployment ${status}**\\n\\nCommit: ${context.sha.substring(0, 7)}\\nEnvironment: ${{ env.ENVIRONMENT }}`;
          
          console.log(message);