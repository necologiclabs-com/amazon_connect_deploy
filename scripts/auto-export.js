#!/usr/bin/env node

const { program } = require('commander');
const cron = require('node-cron');
const fs = require('fs-extra');
const path = require('path');
const yaml = require('yaml');
const { execSync } = require('child_process');
const ConnectFlowExporter = require('./export');

class AutoExportScheduler {
    constructor(configPath = 'config/auto-export.yaml') {
        this.configPath = configPath;
        this.config = null;
    }

    async loadConfig() {
        try {
            if (await fs.pathExists(this.configPath)) {
                const configContent = await fs.readFile(this.configPath, 'utf8');
                this.config = yaml.parse(configContent);
            } else {
                // „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö‰ΩúÊàê
                this.config = this.createDefaultConfig();
                await this.saveConfig();
                console.log(`üìÑ Created default config: ${this.configPath}`);
            }
            return this.config;
        } catch (error) {
            console.error('‚ùå Failed to load config:', error.message);
            throw error;
        }
    }

    createDefaultConfig() {
        return {
            environments: {
                dev: {
                    instanceId: '${CONNECT_INSTANCE_ID_DEV}',
                    region: 'us-east-1',
                    outputDir: 'flows',
                    enabled: true,
                    schedule: '0 2 * * *', // ÊØéÊó• 2:00 AM
                    filters: {
                        types: ['CONTACT_FLOW'],
                        states: ['ACTIVE', 'PUBLISHED']
                    }
                },
                test: {
                    instanceId: '${CONNECT_INSTANCE_ID_TEST}',
                    region: 'us-east-1',
                    outputDir: 'flows-test',
                    enabled: false, // TESTÁí∞Â¢É„ÅØÊâãÂãï„ÅÆ„Åø
                    schedule: '0 3 * * 0', // ÊØéÈÄ±Êó•Êõú 3:00 AM
                    filters: {
                        types: ['CONTACT_FLOW'],
                        states: ['ACTIVE']
                    }
                }
            },
            git: {
                autoCommit: true,
                commitMessage: 'auto: Contact FlowsËá™Âãï„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÊõ¥Êñ∞',
                autoPush: false, // „Çª„Ç≠„É•„É™„ÉÜ„Ç£‰∏äfalseÊé®Â•®
                branch: 'auto-export'
            },
            notifications: {
                slack: {
                    enabled: false,
                    webhookUrl: '${SLACK_WEBHOOK_URL}',
                    channel: '#connect-updates'
                },
                email: {
                    enabled: false,
                    to: ['team@company.com'],
                    subject: 'Connect Flows Auto Export Report'
                }
            },
            incremental: {
                enabled: true,
                checkInterval: '*/30 * * * *', // 30ÂàÜÊØé
                lookbackHours: 1
            }
        };
    }

    async saveConfig() {
        await fs.ensureDir(path.dirname(this.configPath));
        await fs.writeFile(this.configPath, yaml.stringify(this.config));
    }

    /**
     * Áí∞Â¢ÉÂ§âÊï∞„ÇíËß£Ê±∫
     */
    resolveEnvVars(text) {
        return text.replace(/\$\{([^}]+)\}/g, (match, varName) => {
            return process.env[varName] || match;
        });
    }

    /**
     * Âçò‰∏ÄÁí∞Â¢É„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆüË°å
     */
    async exportEnvironment(envName, envConfig) {
        try {
            console.log(`\nüöÄ Starting export for environment: ${envName}`);

            const instanceId = this.resolveEnvVars(envConfig.instanceId);
            if (instanceId.includes('${')) {
                console.log(`‚è≠Ô∏è Skipping ${envName}: Environment variable not resolved`);
                return null;
            }

            const exporter = new ConnectFlowExporter(envConfig.region);

            let results;
            if (this.config.incremental.enabled) {
                // Â¢óÂàÜ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
                const lookbackTime = new Date(Date.now() - envConfig.lookbackHours * 60 * 60 * 1000);
                results = await exporter.exportIncremental(instanceId, envConfig.outputDir, lookbackTime.toISOString());
            } else {
                // ÂÖ®„Ç®„ÇØ„Çπ„Éù„Éº„Éà
                results = await exporter.exportAllFlows(instanceId, envConfig.outputDir, envConfig.filters);
            }

            console.log(`‚úÖ Export completed for ${envName}`);
            return {
                environment: envName,
                success: true,
                results: results,
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            console.error(`‚ùå Export failed for ${envName}:`, error.message);
            return {
                environment: envName,
                success: false,
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }

    /**
     * Git„Ç≥„Éü„ÉÉ„ÉàÂÆüË°å
     */
    async performGitCommit(results) {
        if (!this.config.git.autoCommit) {
            return;
        }

        try {
            console.log('\nüìù Performing Git operations...');

            // Â§âÊõ¥Á¢∫Ë™ç
            const status = execSync('git status --porcelain', { encoding: 'utf8' });
            if (!status.trim()) {
                console.log('üìù No changes to commit');
                return;
            }

            // „Éñ„É©„É≥„ÉÅ‰ΩúÊàê„ÉªÂàá„ÇäÊõø„Åà
            if (this.config.git.branch !== 'main') {
                try {
                    execSync(`git checkout -b ${this.config.git.branch}`, { stdio: 'ignore' });
                } catch {
                    execSync(`git checkout ${this.config.git.branch}`, { stdio: 'ignore' });
                }
            }

            // Â§âÊõ¥„Çí„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞
            execSync('git add flows/ flows-test/', { stdio: 'inherit' });

            // „Ç≥„Éü„ÉÉ„Éà
            const commitMessage = `${this.config.git.commitMessage}\n\n` +
                results.map(r => `- ${r.environment}: ${r.success ? '‚úÖ' : '‚ùå'} ${r.success ? `${r.results.length} flows` : r.error}`).join('\n');

            execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });

            // „Éó„ÉÉ„Ç∑„É• (Ë®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà)
            if (this.config.git.autoPush) {
                execSync(`git push origin ${this.config.git.branch}`, { stdio: 'inherit' });
                console.log('üì§ Changes pushed to remote');
            } else {
                console.log(`üìù Changes committed to branch: ${this.config.git.branch}`);
                console.log('üí° Manual push required: git push origin ' + this.config.git.branch);
            }

        } catch (error) {
            console.error('‚ùå Git operations failed:', error.message);
        }
    }

    /**
     * ÈÄöÁü•ÈÄÅ‰ø°
     */
    async sendNotifications(results) {
        // SlackÈÄöÁü•
        if (this.config.notifications.slack.enabled) {
            try {
                const successful = results.filter(r => r.success).length;
                const failed = results.filter(r => !r.success).length;

                const message = {
                    text: `Connect Flows Auto Export Report`,
                    attachments: [{
                        color: failed > 0 ? 'warning' : 'good',
                        fields: [
                            { title: 'Successful', value: successful.toString(), short: true },
                            { title: 'Failed', value: failed.toString(), short: true },
                            { title: 'Timestamp', value: new Date().toISOString(), short: false }
                        ],
                        footer: 'Amazon Connect Auto Export'
                    }]
                };

                // Slack WebhookÂÆüË£Ö„ÅØÁúÅÁï• (ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØaxios„ÇÑfetch„Çí‰ΩøÁî®)
                console.log('üì¢ Slack notification sent');
            } catch (error) {
                console.error('‚ùå Slack notification failed:', error.message);
            }
        }
    }

    /**
     * ÂÖ®Áí∞Â¢É„ÅÆËá™Âãï„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÂÆüË°å
     */
    async runAutoExport() {
        try {
            console.log('üöÄ Starting scheduled auto export...');
            await this.loadConfig();

            const results = [];
            for (const [envName, envConfig] of Object.entries(this.config.environments)) {
                if (envConfig.enabled) {
                    const result = await this.exportEnvironment(envName, envConfig);
                    if (result) {
                        results.push(result);
                    }
                } else {
                    console.log(`‚è≠Ô∏è Skipping disabled environment: ${envName}`);
                }
            }

            // GitÊìç‰Ωú
            await this.performGitCommit(results);

            // ÈÄöÁü•
            await this.sendNotifications(results);

            console.log('\n‚úÖ Auto export completed');
            return results;

        } catch (error) {
            console.error('‚ùå Auto export failed:', error.message);
            throw error;
        }
    }

    /**
     * „Çπ„Ç±„Ç∏„É•„Éº„É©„ÉºÈñãÂßã
     */
    startScheduler() {
        console.log('‚è∞ Starting auto export scheduler...');

        this.loadConfig().then(() => {
            // „É°„Ç§„É≥„Çπ„Ç±„Ç∏„É•„Éº„É´
            for (const [envName, envConfig] of Object.entries(this.config.environments)) {
                if (envConfig.enabled && envConfig.schedule) {
                    console.log(`üìÖ Scheduled ${envName}: ${envConfig.schedule}`);
                    cron.schedule(envConfig.schedule, async () => {
                        console.log(`\n‚è∞ Triggered scheduled export for ${envName}`);
                        await this.exportEnvironment(envName, envConfig);
                    });
                }
            }

            // Â¢óÂàÜ„ÉÅ„Çß„ÉÉ„ÇØ
            if (this.config.incremental.enabled) {
                console.log(`üîÑ Incremental check: ${this.config.incremental.checkInterval}`);
                cron.schedule(this.config.incremental.checkInterval, async () => {
                    await this.runAutoExport();
                });
            }

            console.log('‚úÖ Scheduler started');
            console.log('üí° Press Ctrl+C to stop');
        });
    }
}

// CLIË®≠ÂÆö
if (require.main === module) {
    program
        .version('1.0.0')
        .description('Amazon Connect Auto Export Scheduler');

    program
        .command('run')
        .description('Run auto export once')
        .option('-c, --config <path>', 'Config file path', 'config/auto-export.yaml')
        .action(async (options) => {
            try {
                const scheduler = new AutoExportScheduler(options.config);
                await scheduler.runAutoExport();
            } catch (error) {
                console.error('‚ùå Auto export failed:', error.message);
                process.exit(1);
            }
        });

    program
        .command('start')
        .description('Start the scheduler daemon')
        .option('-c, --config <path>', 'Config file path', 'config/auto-export.yaml')
        .action(async (options) => {
            try {
                const scheduler = new AutoExportScheduler(options.config);
                scheduler.startScheduler();
            } catch (error) {
                console.error('‚ùå Scheduler failed to start:', error.message);
                process.exit(1);
            }
        });

    program
        .command('config')
        .description('Generate default config file')
        .option('-c, --config <path>', 'Config file path', 'config/auto-export.yaml')
        .action(async (options) => {
            try {
                const scheduler = new AutoExportScheduler(options.config);
                await scheduler.loadConfig(); // „Åì„Çå„Åß„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„Åå‰ΩúÊàê„Åï„Çå„Çã
                console.log(`‚úÖ Config file created: ${options.config}`);
            } catch (error) {
                console.error('‚ùå Config creation failed:', error.message);
                process.exit(1);
            }
        });

    program.parse(process.argv);
}

module.exports = AutoExportScheduler;